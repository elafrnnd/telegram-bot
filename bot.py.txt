from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
import asyncio
from datetime import datetime

# === CONFIGURATION ===
BOT_TOKEN = 8043955129:AAGiatxpVMhkKrjUV_Jj79K5e7FRyAtJK2I
SOURCE_USER_ID = 7635291775
TARGET_GROUPS = 2442024861
SEND_INTERVAL = 10 * 60  # 1 minutes (in seconds)

# === MEMORY TO HOLD LAST MESSAGE ===
latest_message = None

# === HANDLER TO CAPTURE AND FORWARD IMMEDIATELY ===
async def forward_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global latest_message

    if update.effective_user and update.effective_user.id == SOURCE_USER_ID:
        latest_message = update.message  # Store latest message
        print("üì• New message received from source user.")

        for group_id in TARGET_GROUPS:
            try:
                await context.bot.copy_message(
                    chat_id=group_id,
                    from_chat_id=update.effective_chat.id,
                    message_id=update.message.message_id
                )
                print(f"‚úÖ Immediately forwarded to {group_id}")
            except Exception as e:
                print(f"‚ùå Failed to forward to {group_id}: {e}")

# === REPEAT SCHEDULE FUNCTION ===
async def repeat_forward(bot):
    global latest_message
    while True:
        if latest_message:
            for group_id in TARGET_GROUPS:
                try:
                    await bot.copy_message(
                        chat_id=group_id,
                        from_chat_id=latest_message.chat.id,
                        message_id=latest_message.message_id
                    )
                    print(f"‚è∞ Auto-forwarded to {group_id} at {datetime.now()}")
                except Exception as e:
                    print(f"‚ùå Failed to auto-send to {group_id}: {e}")
        await asyncio.sleep(SEND_INTERVAL)

# === MAIN FUNCTION ===
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Listen for all messages to filter by user ID
    app.add_handler(MessageHandler(filters.ALL, forward_handler))

    # Background task to auto-forward latest message
    asyncio.create_task(repeat_forward(app.bot))

    print("üöÄ Bot is running. Will forward and re-send every 10 minutes.")
    await app.run_polling()

# === START BOT ===
if __name__ == '__main__':
    asyncio.run(main())
